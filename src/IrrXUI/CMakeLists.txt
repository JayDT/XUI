set(EXECUTABLE_NAME IrrXUI)
SET(EXECUTABLE_LINK_LIBS "")
SET(EXECUTABLE_LINK_FLAGS ${CMAKE_EXE_LINKER_FLAGS_DEBUG})
SET(MODUL_NAME ${EXECUTABLE_NAME})

list(APPEND EXECUTABLE_LINK_LIBS
    boost
    ${ZLIB_LIBRARIES}
 )

list(APPEND EXECUTABLE_LINK_LIBS
    libCallStack
    MetaRuntime
    irrlicht
    CFramework
    XUI
 ) 

file(GLOB_RECURSE EXECUTABLE_SRCS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.cpp *.h *.xaml)

group_source(${EXECUTABLE_SRCS})
AppendDefaultIncludeDir()

file(GLOB_RECURSE MODUL_HEADER_SRCS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} 
    *UI/*.h
    *Reflected/*.h)

meta_parser_prebuild(
    TARGET ${MODUL_NAME}
    GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/.Assembly"
    SOURCE_ROOT "${CMAKE_CURRENT_LIST_DIR}"
    HEADER_FILES ${MODUL_HEADER_SRCS}
    MODULE_HEADER "${MODUL_NAME}AssemblyModul.h"
    OUT_MODULE_SOURCE META_MODULE_SOURCE
    OUT_GENERATED_FILES META_GENERATED_FILES
    OUT_INC META_GENERATED_HEADERS
    OUT_SRC META_GENERATED_SOURCES
)

LIST(APPEND EXECUTABLE_SRCS ${META_GENERATED_HEADERS})
LIST(APPEND EXECUTABLE_SRCS ${META_GENERATED_SOURCES})

file(GLOB_RECURSE RESOURCE_SRCS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.xaml)

resource_prebuild(
    TARGET ${MODUL_NAME}
    GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/.Resource"
    SOURCE_ROOT "${CMAKE_CURRENT_LIST_DIR}"
    RESOURCE_FILES ${RESOURCE_SRCS}
    OUT_MODULE_SOURCE RESOURCE_MODULE_SOURCE
    OUT_GENERATED_FILES RESOURCE_GENERATED_FILES
    OUT_SRC RESOURCE_GENERATED_SOURCES
)

LIST(APPEND EXECUTABLE_SRCS ${RESOURCE_GENERATED_FILES})

INCLUDE_DIRECTORIES(
    ${PROTOBUF_INCLUDE_DIRS}
)

CreateExecutable("${EXECUTABLE_NAME}" "${EXECUTABLE_SRCS}" "${EXECUTABLE_LINK_LIBS}" "${EXECUTABLE_LINK_FLAGS}")
CreateCxxPch("${EXECUTABLE_NAME}" "${CMAKE_CURRENT_SOURCE_DIR}/StdAfx.h" "${CMAKE_CURRENT_SOURCE_DIR}/StdAfx.cpp")
add_dependencies("${MODUL_NAME}" MetaParser)

meta_parser_build(
    TARGET ${MODUL_NAME}
    GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/.Assembly"
    SOURCE_ROOT "${CMAKE_CURRENT_LIST_DIR}"
    GENERATED_FILES ${META_GENERATED_FILES}
    SOURCE_FILE "${CMAKE_CURRENT_BINARY_DIR}/.Assembly/Assembly_${MODUL_NAME}.dsc"
    MODULE_HEADER "${MODUL_NAME}AssemblyModul.h"
    MODULE_SOURCE_FILE ${META_MODULE_SOURCE}
    HEADER_FILES ${MODUL_HEADER_SRCS}
    PARSER_EXECUTABLE ${MetaParserExecutable}
)

resource_build(
    TARGET ${MODUL_NAME}
    GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/.Resource"
    SOURCE_ROOT "${CMAKE_CURRENT_LIST_DIR}"
    SOURCE_FILE "${CMAKE_CURRENT_BINARY_DIR}/.Resource/Resource_${MODUL_NAME}.dsc"
    MODULE_SOURCE_FILE ${RESOURCE_MODULE_SOURCE}
    RESOURCE_FILES ${RESOURCE_SRCS}
    GENERATED_FILES ${RESOURCE_GENERATED_FILES}
    RESOURCE_EXECUTABLE ${ResourceCompilerExecutable}
)

if( WIN32 )
   message(${LibExSTATUS} "${EXECUTABLE_NAME} set for current project")
   set_property(DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${EXECUTABLE_NAME})

    LINK_DIRECTORIES("${dep}\\lib\\${PLATFORM_NAME}_${CMAKE_BUILD_TYPE}\\")
    if( MSVC )
      install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${BUILD_TYPE}/${EXECUTABLE_NAME}.pdb DESTINATION ${BIN_DIR} CONFIGURATIONS Debug)
    endif( MSVC )

   SET(DIR_SOURCE ${CMAKE_SOURCE_DIR})
   string(REPLACE "/" "\\" DIR_SOURCE "${DIR_SOURCE}")
    add_custom_command(
        TARGET "${EXECUTABLE_NAME}"
        POST_BUILD
        COMMAND xcopy /Y /c ${DIR_SOURCE}\\dep\\lib\\$(Platform)_$(Configuration)\\*.* $(TargetDir)
        COMMENT "Copying to output directory"
        VERBATIM)
endif(WIN32)

    add_custom_command(
        TARGET "${EXECUTABLE_NAME}"
        POST_BUILD
        COMMAND xcopy /E /Y /c ${DIR_SOURCE}\\src\\IrrLicht\\media\\*.* $(TargetDir)\\Resources\\
        COMMENT "Copying to output directory"
        VERBATIM)
