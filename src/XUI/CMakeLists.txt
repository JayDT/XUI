SET(MODUL_NAME "XUI")
SET(MODUL_LINKAGE "STATIC")
SET(MODUL_LINK_LIBS "")
SET(MODUL_LINK_FLAGS "")
SET(LibXUISharedLinkage 1)

IF (LibXUISharedLinkage)
    ADD_DEFINITIONS(-DTC_API_EXPORT_XUI=1)
    SET(MODUL_LINKAGE "SHARED")

    list(APPEND MODUL_LINK_LIBS
       boost
       glm
       ${ZLIB_LIBRARIES}
     )
   
    list(APPEND MODUL_LINK_LIBS
        reactive
        MetaRuntime
        CFramework
        XamlCPP
     )

    IF(WIN32)
        LINK_DIRECTORIES("${dep}\\lib\\${PLATFORM_NAME}_${CMAKE_BUILD_TYPE}\\")
    ENDIF()
ENDIF(LibXUISharedLinkage)

# Glob only and not recurse, there are other libs for that
file(GLOB_RECURSE MODUL_SRCS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.cpp *.c *.xaml *.natvis)
file(GLOB_RECURSE MODUL_HEADER_SRCS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.hpp *.h)

LIST(APPEND MODUL_SRCS ${MODUL_HEADER_SRCS})
group_source(${MODUL_SRCS})
setup_hlsl(${MODUL_SRCS})

SET(MODUL_HEADER_SRCS "")
file(GLOB_RECURSE MODUL_HEADER_SRCS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} 
    *Core/*.h
    *Interfaces/*.h
    *Platform/*.h
    *Styling/*.h
    *UI/*.h)

meta_parser_prebuild(
    TARGET ${MODUL_NAME}
    GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/.Assembly"
    SOURCE_ROOT "${CMAKE_CURRENT_LIST_DIR}"
    HEADER_FILES ${MODUL_HEADER_SRCS}
    MODULE_HEADER "${MODUL_NAME}AssemblyModul.h"
    OUT_MODULE_SOURCE META_MODULE_SOURCE
    OUT_GENERATED_FILES META_GENERATED_FILES
    OUT_INC META_GENERATED_HEADERS
    OUT_SRC META_GENERATED_SOURCES
)

LIST(APPEND MODUL_SRCS ${META_GENERATED_HEADERS})
LIST(APPEND MODUL_SRCS ${META_GENERATED_SOURCES})

file(GLOB_RECURSE RESOURCE_SRCS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.xaml *.png)

resource_prebuild(
    TARGET ${MODUL_NAME}
    GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/.Resource"
    SOURCE_ROOT "${CMAKE_CURRENT_LIST_DIR}"
    RESOURCE_FILES ${RESOURCE_SRCS}
    OUT_MODULE_SOURCE RESOURCE_MODULE_SOURCE
    OUT_GENERATED_FILES RESOURCE_GENERATED_FILES
    OUT_SRC RESOURCE_GENERATED_SOURCES
)

LIST(APPEND MODUL_SRCS ${RESOURCE_GENERATED_FILES})

AppendDefaultIncludeDir(${CMAKE_CURRENT_SOURCE_DIR}/standard)
include_directories(
 ${CMAKE_CURRENT_BINARY_DIR}/.Assembly
)
CreateLibrary("${MODUL_NAME}" "${MODUL_SRCS}" "${MODUL_LINKAGE}" "${MODUL_LINK_LIBS}" "${MODUL_LINK_FLAGS}")
CreateCxxPch("${MODUL_NAME}" "${CMAKE_CURRENT_SOURCE_DIR}/StdAfx.h" "${CMAKE_CURRENT_SOURCE_DIR}/StdAfx.cpp")
add_dependencies("${MODUL_NAME}" MetaParser rs)

meta_parser_build(
    TARGET ${MODUL_NAME}
    GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/.Assembly"
    SOURCE_ROOT "${CMAKE_CURRENT_LIST_DIR}"
    GENERATED_FILES ${META_GENERATED_FILES}
    SOURCE_FILE "${CMAKE_CURRENT_BINARY_DIR}/.Assembly/Assembly_${MODUL_NAME}.dsc"
    MODULE_HEADER "${MODUL_NAME}AssemblyModul.h"
    MODULE_SOURCE_FILE ${META_MODULE_SOURCE}
    HEADER_FILES ${MODUL_HEADER_SRCS}
    PCH_NAME "${CMAKE_CURRENT_SOURCE_DIR}/StdAfx" 
    PARSER_EXECUTABLE ${MetaParserExecutable}
)

resource_build(
    TARGET ${MODUL_NAME}
    GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/.Resource"
    SOURCE_ROOT "${CMAKE_CURRENT_LIST_DIR}"
    SOURCE_FILE "${CMAKE_CURRENT_BINARY_DIR}/.Resource/Resource_${MODUL_NAME}.dsc"
    MODULE_SOURCE_FILE ${RESOURCE_MODULE_SOURCE}
    RESOURCE_FILES ${RESOURCE_SRCS}
    GENERATED_FILES ${RESOURCE_GENERATED_FILES}
    RESOURCE_EXECUTABLE ${ResourceCompilerExecutable}
)

set_target_properties(${MODUL_NAME}
    PROPERTIES
      FOLDER
        "Source")